{"version":3,"sources":["utils/axios-utils.js","hooks/use-http.js","components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.js"],"names":["client","axios","create","baseURL","timeout","useHttp","url","useState","data","setData","error","setError","isLoading","setIsLoading","request","useCallback","config","useEffect","NoQuotesFound","className","classes","noquotes","to","module","exports","QuoteItem","props","item","text","author","id","QuoteList","quotesData","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","quotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","AllQuotes","loadedQuotes","LoadingSpinner","length"],"mappings":"sKAEaA,E,MAASC,EAAMC,OAAO,CACjCC,QAAS,yBACTC,QAAS,MC8BIC,IA9BC,SAACC,GACf,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAEMC,EAAUC,sBAAW,iDAAC,WAAOC,GAAP,0FAC1BH,GAAa,GADa,kBAGDb,EAAOgB,GAHN,uBAGhBR,EAHgB,EAGhBA,KACRC,EAAQD,GAJgB,kBAKjBA,GALiB,kCAOxBG,EAAS,wBAPe,yBASxBE,GAAa,GATW,6EAAD,sDAWxB,IAMH,OAJAI,qBAAU,WACRH,EAAQR,EACT,GAAE,CAACA,EAAKQ,IAEF,CACLN,OACAE,QACAE,YACAE,UAEH,C,kCChCD,mCAceI,IAXO,WACpB,OACE,sBAAKC,UAAWC,IAAQC,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMC,GAAI,aAAcH,UAAU,MAAlC,2BAKL,C,qBCXDI,EAAOC,QAAU,CAAC,SAAW,gC,qBCA7BD,EAAOC,QAAU,CAAC,KAAO,wB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2B,kGCkB5CC,EAhBG,SAACC,GACjB,OACE,qBAAIP,UAAWC,IAAQO,KAAvB,UACE,mCACE,qCACE,4BAAID,EAAME,SAEZ,qCAAaF,EAAMG,YAErB,cAAC,IAAD,CAAMP,GAAE,kBAAaI,EAAMI,IAAMX,UAAU,MAA3C,+BAKL,E,iBCsCcY,EArCG,SAACL,GACjB,IAbkBM,EAaZC,EAAUC,cACVC,EAAWC,cAGXC,EAAiD,QADnC,IAAIC,gBAAgBH,EAASI,QACVC,IAAI,QAErCC,GAnBYT,EAmBcN,EAAMgB,OAAQL,EAjBrCL,EAAWW,MAAK,SAACC,EAAQC,GAC9B,OAAOD,EAAOd,GAAKe,EAAOf,GAAK,GAAK,CACrC,IAEME,EAAWW,MAAK,SAACC,EAAQC,GAC9B,OAAOD,EAAOd,GAAKe,EAAOf,GAAK,GAAK,CACrC,KAoBH,OACE,eAAC,WAAD,WACE,qBAAKX,UAAWC,IAAQ0B,QAAxB,SACE,yBAAQC,QAVS,WACrBd,EAAQe,KAAK,CACXC,SAAUd,EAASc,SACnBV,OAAO,QAAD,OAAUF,EAAqB,OAAS,QAEjD,EAKK,kBACQA,EAAqB,aAAe,iBAG9C,oBAAIlB,UAAWC,IAAQ8B,KAAvB,SACGT,EAAaU,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEtB,GAAIsB,EAAMtB,GACVD,OAAQuB,EAAMvB,OACdD,KAAMwB,EAAMxB,MAHPwB,EAAMtB,GAFG,QAWzB,E,gBC1BcuB,UAtBG,WAChB,MAAiDhD,YAAQ,UAA3CiD,EAAd,EAAQ9C,KAAoBE,EAA5B,EAA4BA,MAE5B,OAFA,EAAmCE,UAI/B,sBAAKO,UAAU,WAAf,UACE,cAACoC,EAAA,EAAD,IADF,OAMA7C,EACK,qBAAKS,UAAU,mBAAf,SAAmCT,IAGf,KAAb,OAAZ4C,QAAY,IAAZA,OAAA,EAAAA,EAAcE,QACT,cAACtC,EAAA,EAAD,IAGF,cAAC,EAAD,CAAWwB,OAAQY,GAAgB,IAC3C,C","file":"static/js/5.700f3d5e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const client = axios.create({\r\n  baseURL: \"http://localhost:4000/\",\r\n  timeout: 1000,\r\n});\r\n","import { useCallback, useEffect, useState } from \"react\";\r\n\r\nimport { client } from \"../utils/axios-utils\";\r\n\r\nconst useHttp = (url) => {\r\n  const [data, setData] = useState();\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const request = useCallback(async (config) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const { data } = await client(config);\r\n      setData(data);\r\n      return data;\r\n    } catch (err) {\r\n      setError(\"something went wrong\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    request(url);\r\n  }, [url, request]);\r\n\r\n  return {\r\n    data,\r\n    error,\r\n    isLoading,\r\n    request,\r\n  };\r\n};\r\n\r\nexport default useHttp;\r\n","import { Link } from \"react-router-dom\";\nimport classes from \"./NoQuotesFound.module.css\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to={\"/new-quote\"} className=\"btn\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__1LoaB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__1Ha_K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list___XBNV\",\"sorting\":\"QuoteList_sorting__1EekI\"};","import { Link } from \"react-router-dom\";\nimport classes from \"./QuoteItem.module.css\";\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className=\"btn\">\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotesData, inAsc) => {\n  if (inAsc) {\n    return quotesData.sort((quoteA, quoteB) => {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    });\n  } else {\n    return quotesData.sort((quoteA, quoteB) => {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    });\n  }\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const sortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `sort=${isSortingAscending ? \"desc\" : \"asc\"}`,\n    });\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={sortingHandler}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import useHttp from \"../hooks/use-http\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst AllQuotes = () => {\r\n  const { data: loadedQuotes, error, isLoading } = useHttp(`quotes`);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />;\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"centered focused\">{error}</div>;\r\n  }\r\n\r\n  if (loadedQuotes?.length === 0) {\r\n    return <NoQuotesFound />;\r\n  }\r\n\r\n  return <QuoteList quotes={loadedQuotes || []} />;\r\n};\r\n\r\nexport default AllQuotes;\r\n"],"sourceRoot":""}